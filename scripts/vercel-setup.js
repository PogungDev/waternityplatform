#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise(resolve => {
    rl.question(prompt, resolve);
  });
}

async function main() {
  console.log('üöÄ Waternity Platform - Vercel Setup Script');
  console.log('============================================\n');

  // Check if user has required tools
  console.log('üìã Checking prerequisites...');
  
  try {
    execSync('npm --version', { stdio: 'ignore' });
    console.log('‚úÖ npm found');
  } catch {
    console.log('‚ùå npm not found. Please install Node.js');
    process.exit(1);
  }

  try {
    execSync('git --version', { stdio: 'ignore' });
    console.log('‚úÖ git found');
  } catch {
    console.log('‚ùå git not found. Please install git');
    process.exit(1);
  }

  // Check if package.json exists
  if (!fs.existsSync('package.json')) {
    console.log('‚ùå package.json not found. Please run this script from the project root.');
    process.exit(1);
  }

  console.log('\nüîß Configuration Setup');
  console.log('======================\n');

  // Get RPC provider choice
  console.log('Choose your RPC provider:');
  console.log('1. Alchemy (Recommended - Free 300M requests/month)');
  console.log('2. Infura (Free 100k requests/day)');
  console.log('3. Custom RPC URL');
  
  const rpcChoice = await question('\nEnter choice (1-3): ');
  
  let rpcUrl = '';
  let apiKey = '';
  
  if (rpcChoice === '1') {
    console.log('\nüìù Alchemy Setup:');
    console.log('1. Go to https://dashboard.alchemy.com/');
    console.log('2. Create account and new app');
    console.log('3. Select "Ethereum Sepolia" network');
    console.log('4. Copy API key from dashboard\n');
    
    apiKey = await question('Enter your Alchemy API key: ');
    rpcUrl = `https://eth-sepolia.g.alchemy.com/v2/${apiKey}`;
    
  } else if (rpcChoice === '2') {
    console.log('\nüìù Infura Setup:');
    console.log('1. Go to https://infura.io/');
    console.log('2. Create account and new project');
    console.log('3. Select "Ethereum Sepolia" network');
    console.log('4. Copy project ID from dashboard\n');
    
    apiKey = await question('Enter your Infura project ID: ');
    rpcUrl = `https://sepolia.infura.io/v3/${apiKey}`;
    
  } else {
    rpcUrl = await question('Enter your custom RPC URL: ');
  }

  // Get network choice
  console.log('\nChoose deployment network:');
  console.log('1. Sepolia (Ethereum testnet) - Recommended');
  console.log('2. Base Sepolia (Base testnet)');
  
  const networkChoice = await question('\nEnter choice (1-2): ');
  
  let chainId = '11155111'; // Sepolia
  let networkName = 'sepolia';
  
  if (networkChoice === '2') {
    chainId = '84532'; // Base Sepolia
    networkName = 'baseSepolia';
    if (rpcChoice === '1' || rpcChoice === '2') {
      rpcUrl = 'https://sepolia.base.org';
    }
  }

  // Generate environment file
  console.log('\nüìÑ Generating environment configuration...');
  
  const envContent = `# VERCEL PRODUCTION ENVIRONMENT
# Generated by vercel-setup.js on ${new Date().toISOString()}

# === REQUIRED ===
NODE_ENV=production
NEXT_PUBLIC_SITE_URL=https://your-app.vercel.app

# === BLOCKCHAIN ===
NEXT_PUBLIC_RPC_URL=${rpcUrl}
NEXT_PUBLIC_CHAIN_ID=${chainId}
${apiKey ? `NEXT_PUBLIC_ALCHEMY_KEY=${apiKey}` : ''}

# === CONTRACT ADDRESSES ===
# These will be updated after deployment
NEXT_PUBLIC_WATERNITY_ROUTER_ADDRESS=
NEXT_PUBLIC_WATER_NFT_ADDRESS=
NEXT_PUBLIC_STAKING_VAULT_ADDRESS=
NEXT_PUBLIC_WELL_REGISTRY_ADDRESS=
NEXT_PUBLIC_MOCK_TOKEN_ADDRESS=
NEXT_PUBLIC_CHAINLINK_AUTOMATION_ADDRESS=
NEXT_PUBLIC_CHAINLINK_DATA_FEEDS_ADDRESS=
NEXT_PUBLIC_CHAINLINK_FUNCTIONS_ADDRESS=

# === DEPLOYMENT CONFIG ===
PRIVATE_KEY=YOUR_DEPLOYMENT_PRIVATE_KEY_HERE
SEPOLIA_RPC_URL=${rpcUrl}
`;

  fs.writeFileSync('.env.vercel-ready', envContent);
  console.log('‚úÖ Environment file created: .env.vercel-ready');

  // Update hardhat config for better testnet support
  console.log('üìù Updating hardhat configuration...');
  
  const hardhatConfigUpdate = `
# Add this to your hardhat.config.js networks section:

    ${networkName}: {
      url: "${rpcUrl}",
      accounts: process.env.PRIVATE_KEY ? [process.env.PRIVATE_KEY] : [],
      chainId: ${chainId},
      gasPrice: "auto"
    },
`;

  fs.writeFileSync('hardhat-network-config.txt', hardhatConfigUpdate);
  console.log('‚úÖ Network config created: hardhat-network-config.txt');

  // Update package.json scripts
  console.log('üìù Adding deployment scripts...');
  
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  packageJson.scripts = {
    ...packageJson.scripts,
    'deploy:testnet': 'hardhat run scripts/deploy-to-testnet.js --network ' + networkName,
    'verify:contracts': 'hardhat verify --network ' + networkName,
    'setup:vercel': 'node scripts/vercel-setup.js',
    'build:production': 'NODE_ENV=production npm run build'
  };

  fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
  console.log('‚úÖ Package.json updated with deployment scripts');

  // Create deployment checklist
  const checklist = `# üöÄ VERCEL DEPLOYMENT CHECKLIST

## ‚úÖ Pre-deployment Setup

- [x] Environment configuration generated
- [x] RPC provider configured (${rpcChoice === '1' ? 'Alchemy' : rpcChoice === '2' ? 'Infura' : 'Custom'})
- [x] Network selected (${networkName})
- [x] Deployment scripts added

## üìã Next Steps

### 1. Get Testnet ETH
${networkChoice === '1' 
  ? '- Go to https://sepoliafaucet.com/' 
  : '- Go to https://bridge.base.org/'
}
- Request testnet ETH for deployment
- Need minimum 0.01 ETH for contract deployment

### 2. Setup Deployment Wallet
- Create new wallet for deployment (recommended)
- Export private key and add to .env.vercel-ready
- Transfer testnet ETH to this wallet

### 3. Deploy Contracts
\`\`\`bash
# Install dependencies
npm install

# Deploy to testnet
npm run deploy:testnet
\`\`\`

### 4. Setup Vercel
\`\`\`bash
# Install Vercel CLI
npm i -g vercel

# Login to Vercel
vercel login

# Deploy to Vercel
vercel --prod
\`\`\`

### 5. Configure Vercel Environment
1. Go to Vercel dashboard
2. Navigate to your project settings
3. Copy environment variables from .env.production (generated after deployment)
4. Add them to Vercel environment variables

## üéØ Success Criteria

- [ ] Contracts deployed to testnet
- [ ] Frontend deployed to Vercel
- [ ] Wallet connection works
- [ ] Contract interactions successful
- [ ] No console errors

## üìû Support

If you encounter issues:
1. Check the logs in deployment script
2. Verify environment variables
3. Check network configuration
4. Review DEPLOYMENT_AUDIT.md

## üí∞ Estimated Costs

- Contract deployment: ~0.01 ETH (testnet - FREE)
- Vercel hosting: FREE tier
- RPC provider: FREE tier
- **Total: $0 to start**

---
Generated on ${new Date().toISOString()}
`;

  fs.writeFileSync('VERCEL_CHECKLIST.md', checklist);
  console.log('‚úÖ Deployment checklist created: VERCEL_CHECKLIST.md');

  console.log('\nüéâ Setup Complete!');
  console.log('==================\n');
  
  console.log('üìÅ Files created:');
  console.log('  - .env.vercel-ready (environment config)');
  console.log('  - hardhat-network-config.txt (network config)');
  console.log('  - VERCEL_CHECKLIST.md (deployment guide)');
  
  console.log('\nüöÄ Next Steps:');
  console.log('1. Get testnet ETH from faucet');
  console.log('2. Add private key to .env.vercel-ready');
  console.log('3. Run: npm run deploy:testnet');
  console.log('4. Run: vercel --prod');
  console.log('5. Configure Vercel environment variables');
  
  console.log('\nüìñ Full guide: VERCEL_CHECKLIST.md');
  
  rl.close();
}

main().catch(console.error); 